diff --git a/apps/openssl.c b/apps/openssl.c
index f35d57f264..18dc9ddd13 100644
--- a/apps/openssl.c
+++ b/apps/openssl.c
@@ -41,6 +41,9 @@ typedef struct {
 /* Special sentinel to exit the program. */
 #define EXIT_THE_PROGRAM (-1)
 
+#define FUZZTIME 1485898104
+time_t time(time_t *t) { if (t != NULL) *t = FUZZTIME; return FUZZTIME; }
+
 /*
  * The LHASH callbacks ("hash" & "cmp") have been replaced by functions with
  * the base prototypes (we cast each variable inside the function to the
diff --git a/apps/s_cb.c b/apps/s_cb.c
index 2f94c13393..49d13ca941 100644
--- a/apps/s_cb.c
+++ b/apps/s_cb.c
@@ -793,6 +793,11 @@ int generate_cookie_callback(SSL *ssl, unsigned char *cookie,
     memcpy(buffer, &port, sizeof(port));
     BIO_ADDR_rawaddress(peer, buffer + sizeof(port), NULL);
 
+		size_t length_cp = length;
+    unsigned char *buffer_cp = buffer;
+		while (length_cp--)
+			*buffer_cp++ = 0xEF;
+
     /* Calculate HMAC of buffer using the secret */
     HMAC(EVP_sha1(), cookie_secret, COOKIE_SECRET_LENGTH,
          buffer, length, cookie, cookie_len);
diff --git a/crypto/rand/drbg_lib.c b/crypto/rand/drbg_lib.c
index d32fa80cf8..42f2abd6c2 100644
--- a/crypto/rand/drbg_lib.c
+++ b/crypto/rand/drbg_lib.c
@@ -645,37 +645,40 @@ int RAND_DRBG_generate(RAND_DRBG *drbg, unsigned char *out, size_t outlen,
  */
 int RAND_DRBG_bytes(RAND_DRBG *drbg, unsigned char *out, size_t outlen)
 {
-    unsigned char *additional = NULL;
-    size_t additional_len;
-    size_t chunk;
-    size_t ret = 0;
-
-    if (drbg->adin_pool == NULL) {
-        if (drbg->type == 0)
-            goto err;
-        drbg->adin_pool = rand_pool_new(0, 0, 0, drbg->max_adinlen);
-        if (drbg->adin_pool == NULL)
-            goto err;
-    }
-
-    additional_len = rand_drbg_get_additional_data(drbg->adin_pool,
-                                                   &additional);
-
-    for ( ; outlen > 0; outlen -= chunk, out += chunk) {
-        chunk = outlen;
-        if (chunk > drbg->max_request)
-            chunk = drbg->max_request;
-        ret = RAND_DRBG_generate(drbg, out, chunk, 0, additional, additional_len);
-        if (!ret)
-            goto err;
-    }
-    ret = 1;
-
- err:
-    if (additional != NULL)
-        rand_drbg_cleanup_additional_data(drbg->adin_pool, additional);
-
-    return ret;
+//    unsigned char *additional = NULL;
+//    size_t additional_len;
+//    size_t chunk;
+//    size_t ret = 0;
+//
+//    if (drbg->adin_pool == NULL) {
+//        if (drbg->type == 0)
+//            goto err;
+//        drbg->adin_pool = rand_pool_new(0, 0, 0, drbg->max_adinlen);
+//        if (drbg->adin_pool == NULL)
+//            goto err;
+//    }
+//
+//    additional_len = rand_drbg_get_additional_data(drbg->adin_pool,
+//                                                   &additional);
+//
+//    for ( ; outlen > 0; outlen -= chunk, out += chunk) {
+//        chunk = outlen;
+//        if (chunk > drbg->max_request)
+//            chunk = drbg->max_request;
+//        ret = RAND_DRBG_generate(drbg, out, chunk, 0, additional, additional_len);
+//        if (!ret)
+//            goto err;
+//    }
+//    ret = 1;
+//
+// err:
+//    if (additional != NULL)
+//        rand_drbg_cleanup_additional_data(drbg->adin_pool, additional);
+//
+//    return ret;
+		for (int i=0; i<outlen; i++)
+			*out++ = i;
+		return 1;
 }
 
 /*
diff --git a/crypto/rand/rand_lib.c b/crypto/rand/rand_lib.c
index 3fdb56cb00..d96d1b9f63 100644
--- a/crypto/rand/rand_lib.c
+++ b/crypto/rand/rand_lib.c
@@ -939,12 +939,15 @@ int RAND_priv_bytes(unsigned char *buf, int num)
 
 int RAND_bytes(unsigned char *buf, int num)
 {
-    const RAND_METHOD *meth = RAND_get_rand_method();
-
-    if (meth != NULL && meth->bytes != NULL)
-        return meth->bytes(buf, num);
-    RANDerr(RAND_F_RAND_BYTES, RAND_R_FUNC_NOT_IMPLEMENTED);
-    return -1;
+    //const RAND_METHOD *meth = RAND_get_rand_method();
+
+    //if (meth != NULL && meth->bytes != NULL)
+    //    return meth->bytes(buf, num);
+    //RANDerr(RAND_F_RAND_BYTES, RAND_R_FUNC_NOT_IMPLEMENTED);
+    //return -1;
+		for (int i=0; i<num; i++)
+			*buf++ = i;
+		return 1;
 }
 
 #if OPENSSL_API_COMPAT < 0x10100000L
