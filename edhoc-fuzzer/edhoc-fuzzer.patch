diff --color -ru edhoc-fuzzer/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/mappers/EdhocInputMapper.java edhoc-fuzzer.patched/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/mappers/EdhocInputMapper.java
--- edhoc-fuzzer/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/mappers/EdhocInputMapper.java	2023-09-18 01:32:29.583627200 +0300
+++ edhoc-fuzzer.patched/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/mappers/EdhocInputMapper.java	2023-09-18 22:38:24.774301200 +0300
@@ -10,6 +10,16 @@
 import com.github.protocolfuzzing.protocolstatefuzzer.components.sul.mapper.mappers.InputMapper;
 import org.eclipse.californium.core.coap.MediaTypeRegistry;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.charset.StandardCharsets;
+import java.util.Scanner;
+
 public class EdhocInputMapper extends InputMapper {
     EdhocMapperConnector edhocMapperConnector;
 
@@ -31,6 +41,32 @@
         EdhocMapperConfig edhocMapperConfig = (EdhocMapperConfig) mapperConfig;
         int contentFormat = edhocMapperConfig.useContentFormat() ? edhocProtocolMessage.getContentFormat() : MediaTypeRegistry.UNDEFINED;
 
+        try {
+            File fileReader = new File("send.length");
+            int recordLength = 0;
+            if(fileReader.exists()) {
+                Scanner scanner = new Scanner(fileReader, StandardCharsets.UTF_8);
+                recordLength = scanner.nextInt();
+            }
+            recordLength += 1;
+            FileWriter fileWriter = new FileWriter("send.length", StandardCharsets.UTF_8);
+            PrintWriter printWriter = new PrintWriter(fileWriter);
+            printWriter.print(recordLength+"\n");
+            fileWriter.close();
+            printWriter.close();
+            byte[] val = edhocProtocolMessage.getPayload();
+            byte[] len = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(val.length).array();
+            FileOutputStream fosRep = new FileOutputStream("send.replay",true);
+            fosRep.write(len);
+            fosRep.write(val);
+            fosRep.close();
+            FileOutputStream fosRaw = new FileOutputStream("send.raw",true);
+            fosRaw.write(val);
+            fosRaw.close();
+        } catch (IOException e) {
+            ;
+        }
+
         edhocMapperConnector.send(edhocProtocolMessage.getPayload(), edhocProtocolMessage.getPayloadType(),
                 edhocProtocolMessage.getMessageCode(), contentFormat);
     }
diff --color -ru edhoc-fuzzer/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/mappers/EdhocOutputMapper.java edhoc-fuzzer.patched/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/mappers/EdhocOutputMapper.java
--- edhoc-fuzzer/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/mappers/EdhocOutputMapper.java	2023-09-18 01:32:29.599251200 +0300
+++ edhoc-fuzzer.patched/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/mappers/EdhocOutputMapper.java	2023-09-18 22:48:28.464266300 +0300
@@ -13,7 +13,15 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
 import java.nio.charset.StandardCharsets;
+import java.util.Scanner;
 
 public class EdhocOutputMapper extends OutputMapper {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -32,6 +40,31 @@
 
         try {
             responsePayload = edhocMapperConnector.receive();
+            try {
+                File fileReader = new File("recv.length");
+                int recordLength = 0;
+                if(fileReader.exists()) {
+                    Scanner scanner = new Scanner(fileReader, StandardCharsets.UTF_8);
+                    recordLength = scanner.nextInt();
+                }
+                recordLength += 1;
+                FileWriter fileWriter = new FileWriter("recv.length", StandardCharsets.UTF_8);
+                PrintWriter printWriter = new PrintWriter(fileWriter);
+                printWriter.print(recordLength+"\n");
+                fileWriter.close();
+                printWriter.close();
+                byte[] val = responsePayload;
+                byte[] len = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(val.length).array();
+                FileOutputStream fosRep = new FileOutputStream("recv.replay",true);
+                fosRep.write(len);
+                fosRep.write(val);
+                fosRep.close();
+                FileOutputStream fosRaw = new FileOutputStream("recv.raw",true);
+                fosRaw.write(val);
+                fosRaw.close();
+            } catch (IOException e) {
+                ;
+            }
         } catch (GenericErrorException e) {
             return socketClosed();
         } catch (TimeoutException e) {
