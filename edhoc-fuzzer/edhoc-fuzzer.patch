diff --color -ru edhoc-fuzzer/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/connectors/ClientMapperConnector.java edhoc-fuzzer.patched/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/connectors/ClientMapperConnector.java
--- edhoc-fuzzer/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/connectors/ClientMapperConnector.java	2023-10-07 02:44:45.361494500 +0300
+++ edhoc-fuzzer.patched/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/connectors/ClientMapperConnector.java	2023-10-07 02:43:30.840788900 +0300
@@ -11,8 +11,16 @@
 import org.eclipse.californium.core.network.CoapEndpoint;
 import org.eclipse.californium.elements.exception.ConnectorException;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
 import java.io.IOException;
+import java.io.PrintWriter;
 import java.net.InetSocketAddress;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.charset.StandardCharsets;
+import java.util.Scanner;
 
 /*
  * It is used when the Mapper should act as a client to connect
@@ -105,6 +113,33 @@
             // null on timeout or exception, but not null on successful exchange
             currentCoapExchangeInfo = coapExchanger.getReceivedQueue().poll();
         }
+
+        try {
+            File fileReader = new File("send.length");
+            int recordLength = 0;
+            if(fileReader.exists()) {
+                Scanner scanner = new Scanner(fileReader, StandardCharsets.UTF_8);
+                recordLength = scanner.nextInt();
+            }
+            recordLength += 1;
+            FileWriter fileWriter = new FileWriter("send.length", StandardCharsets.UTF_8);
+            PrintWriter printWriter = new PrintWriter(fileWriter);
+            printWriter.print(recordLength+"\n");
+            fileWriter.close();
+            printWriter.close();
+            byte[] val = request.getBytes();
+            if (val == null) throw new IOException();
+            byte[] len = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(val.length).array();
+            FileOutputStream fosRep = new FileOutputStream("send.replay",true);
+            fosRep.write(len);
+            fosRep.write(val);
+            fosRep.close();
+            FileOutputStream fosRaw = new FileOutputStream("send.raw",true);
+            fosRaw.write(val);
+            fosRaw.close();
+        } catch (IOException e) {
+            ;
+        }
     }
 
     @Override
@@ -121,6 +156,32 @@
                     throw new TimeoutException();
                 }
 
+                try {
+                    File fileReader = new File("recv.length");
+                    int recordLength = 0;
+                    if(fileReader.exists()) {
+                        Scanner scanner = new Scanner(fileReader, StandardCharsets.UTF_8);
+                        recordLength = scanner.nextInt();
+                    }
+                    FileWriter fileWriter = new FileWriter("recv.length", StandardCharsets.UTF_8);
+                    PrintWriter printWriter = new PrintWriter(fileWriter);
+                    printWriter.print(recordLength+"\n");
+                    fileWriter.close();
+                    printWriter.close();
+                    byte[] val = response.advanced().getBytes();
+                    if (val == null) throw new IOException();
+                    byte[] len = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(val.length).array();
+                    FileOutputStream fosRep = new FileOutputStream("recv.replay",true);
+                    fosRep.write(len);
+                    fosRep.write(val);
+                    fosRep.close();
+                    FileOutputStream fosRaw = new FileOutputStream("recv.raw",true);
+                    fosRaw.write(val);
+                    fosRaw.close();
+                } catch (IOException e) {
+                    ;
+                }
+
                 return response.getPayload();
             }
         }
diff --color -ru edhoc-fuzzer/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/connectors/ServerMapperConnector.java edhoc-fuzzer.patched/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/connectors/ServerMapperConnector.java
--- edhoc-fuzzer/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/connectors/ServerMapperConnector.java	2023-10-07 02:44:45.361494500 +0300
+++ edhoc-fuzzer.patched/src/main/java/com/github/protocolfuzzing/edhocfuzzer/components/sul/mapper/connectors/ServerMapperConnector.java	2023-10-07 02:42:59.531679800 +0300
@@ -8,6 +8,15 @@
 import org.eclipse.californium.core.coap.Response;
 import org.eclipse.californium.core.server.resources.CoapExchange;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.charset.StandardCharsets;
+import java.util.Scanner;
 import java.util.concurrent.TimeUnit;
 
 /*
@@ -144,6 +153,33 @@
             exceptionCodeOccurred = 0;
             currentCoapExchangeInfo = null;
         }
+
+        try {
+            File fileReader = new File("send.length");
+            int recordLength = 0;
+            if(fileReader.exists()) {
+                Scanner scanner = new Scanner(fileReader, StandardCharsets.UTF_8);
+                recordLength = scanner.nextInt();
+            }
+            recordLength += 1;
+            FileWriter fileWriter = new FileWriter("send.length", StandardCharsets.UTF_8);
+            PrintWriter printWriter = new PrintWriter(fileWriter);
+            printWriter.print(recordLength+"\n");
+            fileWriter.close();
+            printWriter.close();
+            byte[] val = response.getBytes();
+            if (val == null) throw new IOException();
+            byte[] len = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(val.length).array();
+            FileOutputStream fosRep = new FileOutputStream("send.replay",true);
+            fosRep.write(len);
+            fosRep.write(val);
+            fosRep.close();
+            FileOutputStream fosRaw = new FileOutputStream("send.raw",true);
+            fosRaw.write(val);
+            fosRaw.close();
+        } catch (IOException e) {
+            ;
+        }
     }
 
     @Override
@@ -164,6 +200,33 @@
                     throw new UnsuccessfulMessageException();
                 }
 
+                try {
+                    File fileReader = new File("recv.length");
+                    int recordLength = 0;
+                    if(fileReader.exists()) {
+                        Scanner scanner = new Scanner(fileReader, StandardCharsets.UTF_8);
+                        recordLength = scanner.nextInt();
+                    }
+                    recordLength += 1;
+                    FileWriter fileWriter = new FileWriter("recv.length", StandardCharsets.UTF_8);
+                    PrintWriter printWriter = new PrintWriter(fileWriter);
+                    printWriter.print(recordLength+"\n");
+                    fileWriter.close();
+                    printWriter.close();
+                    byte[] val = currentCoapExchangeInfo.getCoapExchange().advanced().getRequest().getBytes();
+                    if (val == null) throw new IOException();
+                    byte[] len = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(val.length).array();
+                    FileOutputStream fosRep = new FileOutputStream("recv.replay",true);
+                    fosRep.write(len);
+                    fosRep.write(val);
+                    fosRep.close();
+                    FileOutputStream fosRaw = new FileOutputStream("recv.raw",true);
+                    fosRaw.write(val);
+                    fosRaw.close();
+                } catch (IOException e) {
+                    ;
+                }
+
                 return currentCoapExchangeInfo.getCoapExchange().advanced().getRequest().getPayload();
             }
         }
